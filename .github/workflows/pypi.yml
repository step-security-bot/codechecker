name: codechecker-pypi-package

# Triggers the workflow on 'release' request events.
# The pypi package will be published only on the release event.
on:
  release:
    types: [published]

jobs:
  build:
    name: Build pypi package
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version: '3.8'
      - uses: actions/setup-node@f1f314fca9dfce2769ece7d933488f076716723e # v1.4.6
        with:
          node-version: '16.x'

      - name: Install dependencies
        run: |
          sudo apt-get update -q
          sudo apt-get install g++ gcc-multilib

      - name: Get tag version
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
        id: get_version
        run: |
          echo ::set-output name=VERSION::$(echo ${GITHUB_REF#refs/tags/v} | sed 's/-//')

      # Set package version information in the 'setup.py' file based on the
      # released git tag information.
      - name: Set version in the setup.py file
        if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags')
        run: |
          sed -i "s/version=\".*\"/version=\"${{ steps.get_version.outputs.VERSION }}\"/" setup.py

      - name: Create the pypi package
        run: |
          make dist

      - uses: actions/upload-artifact@0c366cb4fc8897159c94880f94b55bc716ad6a66 # master
        with:
          name: pypi-package
          path: |
            dist
            tests/functional/binary_package/

  test:
    name: Install and test pypi package
    runs-on: ${{ matrix.os }}
    needs: build

    strategy:
      matrix:
        os: [ubuntu-20.04, macos-10.15, windows-2019]

    steps:
      - uses: actions/setup-python@61a6322f88396a6271a6ee3565807d608ecaddd1 # v4.7.0
        with:
          python-version: '3.8'

      - uses: actions/download-artifact@2a5974104b6d5dbdb2f9468a3e54da3bdd241578 # master
        with:
          name: pypi-package
          path: ./

      - name: "Install run-time dependencies (Linux)"
        if: ${{ matrix.os == 'ubuntu-20.04' }}
        run:
          sudo apt-get update && sudo apt-get install g++ clang clang-tidy cppcheck

      - name: "Install run-time dependencies (OSX)"
        if: ${{ matrix.os == 'macos-10.15' }}
        run:
          brew install llvm cppcheck

      - name: "Install run-time dependencies (Windows)"
        if: ${{ matrix.os == 'windows-2019' }}
        shell: powershell
        run: |
          choco install llvm;
          choco install --ignore-package-exit-codes cppcheck;
          echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: "Install pypi package"
        shell: bash
        run: |
          pip install wheel pytest
          pip install dist/codechecker-*.tar.gz

      - name: "Test CodeChecker commands"
        run: |
          pytest tests/functional/binary_package/

  # Publish pypi package when a new CodeChecker version is released.
  publish:
    name: Publish pypi package
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - uses: actions/download-artifact@2a5974104b6d5dbdb2f9468a3e54da3bdd241578 # master
        with:
          name: pypi-package
          path: ./

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@b7f401de30cb6434a1e19f805ff006643653240e # release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
